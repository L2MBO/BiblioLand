SELECT * FROM sys.triggers;

DROP TRIGGER IF EXISTS trg_UpdateAverageRatingAfterInsert;
DROP TRIGGER IF EXISTS trg_UpdateAverageRatingAfterDelete;
DROP TRIGGER IF EXISTS trg_UpdateAverageRatingAfterUpdate;

-- Создание триггера для обновления среднего рейтинга после вставки отзыва
CREATE TRIGGER trg_UpdateAverageRatingAfterInsert
ON Rating
AFTER INSERT
AS
BEGIN
    UPDATE Books
    SET AverageRating = (
        SELECT AVG(Rating * 1.0) -- Умножаем на 1.0 для преобразования к DECIMAL
        FROM Rating
        WHERE BookID = i.BookID
    )
    FROM inserted i
    WHERE Books.BookID = i.BookID;
END;

-- Создание триггера для обновления среднего рейтинга после удаления отзыва
CREATE TRIGGER trg_UpdateAverageRatingAfterDelete
ON Rating
AFTER DELETE
AS
BEGIN
    UPDATE Books
    SET AverageRating = COALESCE(
        (
            SELECT AVG(Rating * 1.0) -- Умножаем на 1.0 для преобразования к DECIMAL
            FROM Rating
            WHERE BookID = d.BookID
        ),
        0.00 -- Значение по умолчанию, если среднее значение равно NULL
    )
    FROM deleted d
    WHERE Books.BookID = d.BookID;
END;

-- Создание триггера для обновления среднего рейтинга после обновления отзыва
CREATE TRIGGER trg_UpdateAverageRatingAfterUpdate
ON Rating
AFTER UPDATE
AS
BEGIN
    -- Если обновляется поле Rating, пересчитываем средний рейтинг
    IF UPDATE(Rating)
    BEGIN
        UPDATE Books
        SET AverageRating = (
            SELECT AVG(Rating * 1.0) -- Умножаем на 1.0 для преобразования к DECIMAL
            FROM Rating
            WHERE BookID = i.BookID
        )
        FROM inserted i
        WHERE Books.BookID = i.BookID;
    END
END;